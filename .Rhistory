use_testthat()
# Step 0. c
use_rcpp()
usethis::use_rcpp()
use_r("zzz.R")
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 2
Rcpp::compileAttributes()
# Step 3
devtools::load_all()
# Step 6. So far everything goes well. We can use check command
#   More extensive check if all piece work together
devtools::check()
# STEP 8
install()
transactions <- read.csv("D:/EMBA/DATA501/Package/Test_data.csv", stringsAsFactors = FALSE)
head(transactions)
ds <- new_deposit_dataset(transactions)
#' Create a deposit dataset object
#'
#' @param transactions A data frame of transaction records.
#' @param window_size Rolling window size (default 30).
#' @param z_thresh Z-score threshold for anomaly detection (default 3).
#' @param freq_thresh Frequency threshold for anomaly detection (default 5).
#'
#' @return An object of class \code{deposit_dataset}.
#' @export
new_deposit_dataset <- function(transactions,
window_size = 30,
z_thresh = 3,
freq_thresh = 5) {
if (!is.data.frame(transactions)) {
stop("transactions must be a data frame.")
}
obj <- list(
transactions = transactions,  # all customers
window_size = window_size,
z_thresh = z_thresh,
freq_thresh = freq_thresh,
results = NULL
)
class(obj) <- "deposit_dataset"
obj
}
ds <- new_deposit_dataset(transactions)
library(sloop)
otype(ds)
#' @examples
#' transactions <- data.frame(
#'   customer_id = rep(c("C1", "C2"), each = 5),
#'   date = rep(seq.Date(Sys.Date() - 4, Sys.Date(), by = "day"), 2),
#'   amount = c(100, 105, 102, 300, 250, 95, 98, 97, 99, 101)
#' )
#'
#' ds <- new_deposit_dataset(transactions, window_size = 3, z_thresh = 2)
#' ds <- detect_anomalies(ds)
#' summary(ds)
detect_anomalies.deposit_dataset <- function(obj) {
results <- obj$transactions %>%
dplyr::group_by(customer_id) %>%
dplyr::arrange(date) %>%
dplyr::group_modify(~ {
stats <- rollingStats(.x$amount, obj$window_size)
.x$roll_mean <- stats$roll_mean
.x$roll_sd   <- stats$roll_sd
.x$z_score   <- (.x$amount - .x$roll_mean) / .x$roll_sd
.x$flag      <- abs(.x$z_score) > obj$z_thresh
.x
}) %>%
dplyr::summarise(anomaly_count = sum(flag, na.rm = TRUE), .groups = "drop")
obj$results <- results
obj
}
detect_anomalies.deposit_dataset(ds)
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
transactions <- read.csv("D:/EMBA/DATA501/Package/Deposits.csv", stringsAsFactors = FALSE)
head(transactions)
ds <- new_deposit_dataset(transactions)
otype(ds)
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 2
Rcpp::compileAttributes()
# Step 3
devtools::load_all()
# Step 0. a
library(usethis)
library(devtools)
library(roxygen2)
library(testthat)
library(sloop)
library(dplyr)
library(magrittr)
use_package("Rcpp",type="LinkingTo")
usethis::use_roxygen_md()
usethis::use_package("dplyr")
usethis::use_package("zoo")
usethis::use_rcpp()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
head(transactions)
rm(list=ls())
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
#' @importFrom magrittr %>%
NULL
#' Create a deposit dataset object
#'
#' @param transactions A data frame of transaction records.
#' @param window_size Rolling window size (default 30).
#' @param z_thresh Z-score threshold for anomaly detection (default 3).
#' @param freq_thresh Frequency threshold for anomaly detection (default 5).
#'
#' @return An object of class \code{deposit_dataset}.
#' @export
new_deposit_dataset <- function(transactions,
window_size = 30,
z_thresh = 3,
freq_thresh = 5) {
if (!is.data.frame(transactions)) {
stop("transactions must be a data frame")
}
obj <- list(
transactions = transactions,  # all customers
window_size = window_size,
z_thresh = z_thresh,
freq_thresh = freq_thresh,
results = NULL
)
class(obj) <- "deposit_dataset"
obj
}
transactions <- read.csv("D:/EMBA/DATA501/Package/Deposits.csv", stringsAsFactors = FALSE)
head(transactions)
ds <- new_deposit_dataset(transactions)
#' @examples
#' transactions <- data.frame(
#'   customer_id = rep(c("C1", "C2"), each = 5),
#'   date = rep(seq.Date(Sys.Date() - 4, Sys.Date(), by = "day"), 2),
#'   amount = c(100, 105, 102, 300, 250, 95, 98, 97, 99, 101)
#' )
#'
#' ds <- new_deposit_dataset(transactions, window_size = 3, z_thresh = 2)
#' ds <- detect_anomalies(ds)
#' summary(ds)
detect_anomalies.deposit_dataset <- function(obj) {
results <- obj$transactions %>%
dplyr::group_by(customer_id) %>%
dplyr::arrange(date) %>%
dplyr::group_modify(~ {
stats <- rollingStats(.x$amount, obj$window_size)
.x$roll_mean <- stats$roll_mean
.x$roll_sd   <- stats$roll_sd
.x$z_score   <- (.x$amount - .x$roll_mean) / .x$roll_sd
.x$flag      <- abs(.x$z_score) > obj$z_thresh
.x
}) %>%
dplyr::summarise(anomaly_count = sum(flag, na.rm = TRUE), .groups = "drop")
obj$results <- results
obj
}
detect_anomalies.deposit_dataset(ds)
# Step 2
Rcpp::compileAttributes()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
rm(list=ls())
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 3
devtools::load_all()
# Step 6. So far everything goes well. We can use check command
#   More extensive check if all piece work together
devtools::check()
devtools::check()
devtools::document()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
devtools::document()
devtools::check()
devtools::check()
rm(list = ls())
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
head(transactions)
new_deposit_dataset()
new_deposit_dataset
devtools::check()
devtools::check()
devtools::check()
# Step 6. So far everything goes well. We can use check command
#   More extensive check if all piece work together
devtools::check()
# Formal you automize this.
# Create a new R file in tests/testhat folder
# The name of this file must be: "test-helloword.R
# Add the lines we used before and run command:
test()
# First try test:
test_file("./tests/testthat/test_new_deposit_dataset.R")
transactions <- read.csv("D:/EMBA/DATA501/Package/Deposits.csv", stringsAsFactors = FALSE)
ds <- new_deposit_dataset(transactions)
devtools::document()
devtools::check()
# Step 3
devtools::load_all()
# Step 3
devtools::load_all()
# Step 6. So far everything goes well. We can use check command
#   More extensive check if all piece work together
devtools::check()
# Step 6. So far everything goes well. We can use check command
#   More extensive check if all piece work together
devtools::check()
# Step 3
devtools::load_all()
# Step 6. So far everything goes well. We can use check command
#   More extensive check if all piece work together
devtools::check()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 0. a
library(usethis)
library(devtools)
library(roxygen2)
library(testthat)
library(sloop)
library(dplyr)
library(magrittr)
library(ggplot2)
library(lubridate)
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 3
devtools::load_all()
transactions1 <- read.csv("D:/EMBA/DATA501/Package/Deposits.csv", stringsAsFactors = FALSE)
# Convert date column to Date class
transactions1$date <- as.Date(transactions1$date, format = "%Y-%m-%d")
# Save it back to .rda in the data folder for your package
save(transactions1, file = "data/transactions.rda")
# Step 3
devtools::load_all()
# Step 6. So far everything goes well. We can use check command
#   More extensive check if all piece work together
devtools::check()
# Step 6. So far everything goes well. We can use check command
#   More extensive check if all piece work together
devtools::check()
# Step 6. So far everything goes well. We can use check command
#   More extensive check if all piece work together
devtools::check()
# Load the dataset from your package data folder (if not already loaded)
load("data/transactions.rda")
transactions1 <- read.csv("D:/EMBA/DATA501/Package/Deposits.csv", stringsAsFactors = FALSE)
# Convert date column to Date class
transactions1$date <- as.Date(transactions1$date, format = "%Y-%m-%d")
str(transactions1)
# Save it back to .rda in the data folder for your package
save(transactions1, file = "data/transactions.rda")
str(transactions)
# Step 6. So far everything goes well. We can use check command
#   More extensive check if all piece work together
devtools::check()
str(transactions)
str(depositWatch::transactions)
# Step 3
devtools::load_all()
library(depositWatch)
data("transactions")
str(transactions)
ls()
rm(list = ls())
library(depositWatch)
data("transactions")
str(transactions)
ls()
library(depositWatch)
data("transactions")
str(transactions)
ls()
ds = new_deposit_dataset(transactions)
ds
ds
str(ds)
ds1 <- detect_anomalies(ds)
plot_anomalies(ds1)
summary(ds1)
library(depositWatch)
data("transactions")
str(transactions)
ls()
ds
str(ds)
ds1 <- detect_anomalies(ds)
summary(ds1)
plot_anomalies(ds)
plot_anomalies(ds1)
ds <- data("transactions")
str(ds)
str(ds)
ls()
str(ds1)
# Step 0. a
library(usethis)
library(devtools)
library(roxygen2)
library(testthat)
library(sloop)
library(dplyr)
library(magrittr)
library(ggplot2)
library(lubridate)
# Step 3
devtools::load_all()
head(transactions)
str(transactions)
ds <- new_deposit_dataset(transactions)
ds <- detect_anomalies(ds)
ds <- new_deposit_dataset(transactions)
ds1 <- detect_anomalies(ds)
class(ds)
class(ds1)
save(ds1, file = "D:/EMBA/DATA501/Assignment2/ds1.rda")
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 3
devtools::load_all()
# Step 2
Rcpp::compileAttributes()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# Step 3
devtools::load_all()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
head(transactions)
ds <- new_deposit_dataset(transactions)
ds <- detect_anomalies(ds)
plot(ds)
?plot
browseVignettes(lubridate)
browseVignettes("lubridate")
browseVignettes("ggplot2")
ds
# Step 3
devtools::load_all()
head(transactions)
str(transactions)
# Step 3
devtools::load_all()
# Step 3
devtools::load_all()
head(transactions)
ds
rm(list= ls())
ds
head(transactions)
str(transactions)
ds
# Step 3
devtools::load_all()
# Step 6. So far everything goes well. We can use check command
#   More extensive check if all piece work together
devtools::check()
# Step 1
# Create a namespace (We don't want to ever edit this file manually)
devtools::document()
# STEP 8
install()
# STEP 8
devtools::install()
library(devtools)
# Step 3
devtools::load_all()
# STEP 8
devtools::install()
remove.packages("depositWatch")
# STEP 8
devtools::install()
# Step 3
devtools::load_all()
# STEP 8
devtools::install()
# STEP 8
devtools::install()
library(depositWatch)
transactions
transactions <- read.csv("D:/EMBA/DATA501/Package/Deposits.csv", stringsAsFactors = FALSE)
head(transactions)
str(transactions)
# Convert date column to Date class
transactions$date <- as.Date(transactions$date, format = "%d-%m-%Y")
str(transactions)
transactions
str(transactions)
# Save it back to .rda in the data folder for your package
save(transactions, file = "data/transactions.rda")
ds <- new_deposit_dataset(transactions)
# Step 3
devtools::load_all()
ds <- new_deposit_dataset(transactions)
ds
str(transactions)
transactions
# Step 3
devtools::load_all()
transactions
str(transactions)
rm(list=())
rm(list = ls())
transactions
str(transactions)
ds <- new_deposit_dataset(transactions)
ds <- detect_anomalies(ds)
ds$results
plot(ds)
# Step 3
devtools::load_all()
devtools::document()
devtools::check()
ds <- new_deposit_dataset(transactions)
ds <- detect_anomalies(ds)
plot(ds)
ds$results
# Step 3
devtools::load_all()
?detect_anomalies.deposit_dataset
summary.deposit_dataset
?summary.deposit_dataset
# Step 3
devtools::load_all()
devtools::document()
# Step 3
devtools::load_all()
devtools::document()
devtools::check()
?summary.deposit_dataset
# Step 3
devtools::load_all()
str(transactions)
# Step 3
devtools::load_all()
devtools::document()
devtools::check()
?new_deposit_dataset
?summary
?summary.deposit_dataset
?new_deposit_dataset
class(transactions)
class (ds)
# First try test:
test_file("./tests/testthat/test_new_deposit_dataset.R")
# Step 3
devtools::load_all()
# First try test:
test_file("./tests/testthat/test_new_deposit_dataset.R")
knitr::opts_chunk$set(echo = TRUE)
browseVignettes("depositWatch")
browseVignettes("depositWatch")
# Step 3
devtools::load_all()
remove.packages("depositWatch")
# STEP 8
devtools::install()
browseVignettes("depositWatch")
install(
path = "D:/EMBA/Data501/Package",
build_vignettes = TRUE
)
# STEP 8
devtools::install(build_vignettes = TRUE)
remove.packages("depositWatch")
# STEP 8
devtools::install(build_vignettes = TRUE)
library(depositWatch)
# Step 3
devtools::load_all()
devtools::document()
devtools::check()
# STEP 8
devtools::install(build_vignettes = TRUE)
library(depositWatch)
browseVignettes("depositWatch")
# Step 3
devtools::load_all()
browseVignettes("depositWatch")
browseVignettes("depositWatch")
# STEP 8
devtools::install(build_vignettes = TRUE)
remove.packages("depositWatch")
library(depositWatch)
